import bcrypt from "bcrypt"
import pool from "../config/database.js"
import dotenv from "dotenv"

dotenv.config()

async function diagnoseAuth() {
  console.log("üîç DIAGN√ìSTICO DE AUTENTICACI√ìN")
  console.log("==============================")

  try {
    // 1. Verificar conexi√≥n a la base de datos
    console.log("\n1Ô∏è‚É£ Verificando conexi√≥n a la base de datos...")
    const connection = await pool.getConnection()
    console.log("‚úÖ Conexi√≥n a la base de datos establecida correctamente")

    // 2. Verificar usuarios en la base de datos
    console.log("\n2Ô∏è‚É£ Verificando usuarios en la base de datos...")
    const [users] = await connection.execute("SELECT id, username, email, password, role FROM users LIMIT 10")

    if (users.length === 0) {
      console.log("‚ùå No hay usuarios en la base de datos")
    } else {
      console.log(`‚úÖ Se encontraron ${users.length} usuarios`)

      // 3. Verificar contrase√±as
      console.log("\n3Ô∏è‚É£ Verificando contrase√±as...")
      const testPassword = "password123"

      for (const user of users) {
        console.log(`\nüë§ Usuario: ${user.username} (${user.email})`)
        console.log(`üîë Hash almacenado: ${user.password}`)

        try {
          // Verificar si es un hash de bcrypt v√°lido
          const isBcrypt = user.password.startsWith("$2")
          console.log(`üîç ¬øEs hash bcrypt? ${isBcrypt ? "S√≠" : "No"}`)

          if (isBcrypt) {
            // Intentar verificar con la contrase√±a de prueba
            const isMatch = await bcrypt.compare(testPassword, user.password)
            console.log(`üîê Verificaci√≥n con 'password123': ${isMatch ? "‚úÖ CORRECTA" : "‚ùå INCORRECTA"}`)

            // Si no coincide, crear un hash nuevo para mostrar c√≥mo deber√≠a ser
            if (!isMatch) {
              const newHash = await bcrypt.hash(testPassword, 12)
              console.log(`üí° Hash correcto para 'password123': ${newHash}`)

              // Actualizar la contrase√±a si se confirma
              const updatePassword = true // Cambiar a false para no actualizar
              if (updatePassword) {
                await connection.execute("UPDATE users SET password = ? WHERE id = ?", [newHash, user.id])
                console.log(`‚úÖ Contrase√±a actualizada para ${user.username}`)
              }
            }
          } else {
            // Si no es bcrypt, hashear y actualizar
            const newHash = await bcrypt.hash(testPassword, 12)
            console.log(`üí° Generando nuevo hash: ${newHash}`)

            await connection.execute("UPDATE users SET password = ? WHERE id = ?", [newHash, user.id])
            console.log(`‚úÖ Contrase√±a actualizada para ${user.username}`)
          }
        } catch (error) {
          console.log(`‚ùå Error verificando contrase√±a: ${error.message}`)
        }
      }
    }

    // 4. Crear un usuario de prueba garantizado
    console.log("\n4Ô∏è‚É£ Creando usuario de prueba garantizado...")
    const testUser = {
      username: "testuser",
      email: "test@example.com",
      password: await bcrypt.hash("password123", 12),
      role: "blind",
      name: "Usuario de Prueba",
    }

    // Eliminar si existe
    await connection.execute("DELETE FROM users WHERE email = ?", [testUser.email])

    // Crear nuevo
    await connection.execute("INSERT INTO users (username, email, password, role, name) VALUES (?, ?, ?, ?, ?)", [
      testUser.username,
      testUser.email,
      testUser.password,
      testUser.role,
      testUser.name,
    ])

    console.log(`‚úÖ Usuario de prueba creado: ${testUser.email} / password123`)

    // Liberar conexi√≥n
    connection.release()
  } catch (error) {
    console.error("‚ùå ERROR EN DIAGN√ìSTICO:", error)
  } finally {
    // Cerrar pool
    await pool.end()
    console.log("\n‚úÖ Diagn√≥stico completado")
  }
}

// Ejecutar si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  diagnoseAuth().catch(console.error)
}

export default diagnoseAuth
